"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Assignment`."""
  assignments(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Assignment`."""
    orderBy: [AssignmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssignmentCondition
  ): AssignmentsConnection

  """Reads and enables pagination through a set of `Course`."""
  courses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Course`."""
    orderBy: [CoursesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CourseCondition
  ): CoursesConnection
  assignment(pk: Int!): Assignment
  assignmentById(id: UUID!): Assignment
  course(pk: Int!): Course
  courseById(id: UUID!): Course

  """Reads a single `Assignment` using its globally unique `ID`."""
  assignmentByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Assignment`.
    """
    nodeId: ID!
  ): Assignment

  """Reads a single `Course` using its globally unique `ID`."""
  courseByNodeId(
    """The globally unique `ID` to be used in selecting a single `Course`."""
    nodeId: ID!
  ): Course
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""A connection to a list of `Assignment` values."""
type AssignmentsConnection {
  """A list of `Assignment` objects."""
  nodes: [Assignment!]!

  """
  A list of edges which contains the `Assignment` and cursor to aid in pagination.
  """
  edges: [AssignmentsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Assignment` you could get from the connection."""
  totalCount: Int!
}

type Assignment implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  pk: Int!
  id: UUID!
  name: String
  grade: BigFloat
  weight: BigFloat
  courseId: Int!

  """Reads a single `Course` that is related to this `Assignment`."""
  course: Course
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

type Course implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  pk: Int!
  id: UUID!
  name: String

  """Reads and enables pagination through a set of `Assignment`."""
  assignments(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Assignment`."""
    orderBy: [AssignmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssignmentCondition
  ): AssignmentsConnection!
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Methods to use when ordering `Assignment`."""
enum AssignmentsOrderBy {
  NATURAL
  PK_ASC
  PK_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  GRADE_ASC
  GRADE_DESC
  WEIGHT_ASC
  WEIGHT_DESC
  COURSE_ID_ASC
  COURSE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Assignment` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input AssignmentCondition {
  """Checks for equality with the object’s `pk` field."""
  pk: Int

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `grade` field."""
  grade: BigFloat

  """Checks for equality with the object’s `weight` field."""
  weight: BigFloat

  """Checks for equality with the object’s `courseId` field."""
  courseId: Int
}

"""A `Assignment` edge in the connection."""
type AssignmentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Assignment` at the end of the edge."""
  node: Assignment!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""A connection to a list of `Course` values."""
type CoursesConnection {
  """A list of `Course` objects."""
  nodes: [Course!]!

  """
  A list of edges which contains the `Course` and cursor to aid in pagination.
  """
  edges: [CoursesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Course` you could get from the connection."""
  totalCount: Int!
}

"""A `Course` edge in the connection."""
type CoursesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Course` at the end of the edge."""
  node: Course!
}

"""Methods to use when ordering `Course`."""
enum CoursesOrderBy {
  NATURAL
  PK_ASC
  PK_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Course` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input CourseCondition {
  """Checks for equality with the object’s `pk` field."""
  pk: Int

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Assignment`."""
  createAssignment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAssignmentInput!
  ): CreateAssignmentPayload

  """Creates a single `Course`."""
  createCourse(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCourseInput!
  ): CreateCoursePayload

  """
  Updates a single `Assignment` using its globally unique id and a patch.
  """
  updateAssignmentByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAssignmentByNodeIdInput!
  ): UpdateAssignmentPayload

  """Updates a single `Assignment` using a unique key and a patch."""
  updateAssignment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAssignmentInput!
  ): UpdateAssignmentPayload

  """Updates a single `Assignment` using a unique key and a patch."""
  updateAssignmentById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAssignmentByIdInput!
  ): UpdateAssignmentPayload

  """Updates a single `Course` using its globally unique id and a patch."""
  updateCourseByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCourseByNodeIdInput!
  ): UpdateCoursePayload

  """Updates a single `Course` using a unique key and a patch."""
  updateCourse(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCourseInput!
  ): UpdateCoursePayload

  """Updates a single `Course` using a unique key and a patch."""
  updateCourseById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCourseByIdInput!
  ): UpdateCoursePayload

  """Deletes a single `Assignment` using its globally unique id."""
  deleteAssignmentByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAssignmentByNodeIdInput!
  ): DeleteAssignmentPayload

  """Deletes a single `Assignment` using a unique key."""
  deleteAssignment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAssignmentInput!
  ): DeleteAssignmentPayload

  """Deletes a single `Assignment` using a unique key."""
  deleteAssignmentById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAssignmentByIdInput!
  ): DeleteAssignmentPayload

  """Deletes a single `Course` using its globally unique id."""
  deleteCourseByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCourseByNodeIdInput!
  ): DeleteCoursePayload

  """Deletes a single `Course` using a unique key."""
  deleteCourse(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCourseInput!
  ): DeleteCoursePayload

  """Deletes a single `Course` using a unique key."""
  deleteCourseById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCourseByIdInput!
  ): DeleteCoursePayload
}

"""The output of our create `Assignment` mutation."""
type CreateAssignmentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Assignment` that was created by this mutation."""
  assignment: Assignment

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Course` that is related to this `Assignment`."""
  course: Course

  """An edge for our `Assignment`. May be used by Relay 1."""
  assignmentEdge(
    """The method to use when ordering `Assignment`."""
    orderBy: [AssignmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AssignmentsEdge
}

"""All input for the create `Assignment` mutation."""
input CreateAssignmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Assignment` to be created by this mutation."""
  assignment: AssignmentInput!
}

"""An input for mutations affecting `Assignment`"""
input AssignmentInput {
  pk: Int
  id: UUID
  name: String
  grade: BigFloat
  weight: BigFloat
  courseId: Int!
}

"""The output of our create `Course` mutation."""
type CreateCoursePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Course` that was created by this mutation."""
  course: Course

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Course`. May be used by Relay 1."""
  courseEdge(
    """The method to use when ordering `Course`."""
    orderBy: [CoursesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CoursesEdge
}

"""All input for the create `Course` mutation."""
input CreateCourseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Course` to be created by this mutation."""
  course: CourseInput!
}

"""An input for mutations affecting `Course`"""
input CourseInput {
  pk: Int
  id: UUID
  name: String
}

"""The output of our update `Assignment` mutation."""
type UpdateAssignmentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Assignment` that was updated by this mutation."""
  assignment: Assignment

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Course` that is related to this `Assignment`."""
  course: Course

  """An edge for our `Assignment`. May be used by Relay 1."""
  assignmentEdge(
    """The method to use when ordering `Assignment`."""
    orderBy: [AssignmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AssignmentsEdge
}

"""All input for the `updateAssignmentByNodeId` mutation."""
input UpdateAssignmentByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Assignment` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Assignment` being updated.
  """
  patch: AssignmentPatch!
}

"""
Represents an update to a `Assignment`. Fields that are set will be updated.
"""
input AssignmentPatch {
  pk: Int
  id: UUID
  name: String
  grade: BigFloat
  weight: BigFloat
  courseId: Int
}

"""All input for the `updateAssignment` mutation."""
input UpdateAssignmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Assignment` being updated.
  """
  patch: AssignmentPatch!
  pk: Int!
}

"""All input for the `updateAssignmentById` mutation."""
input UpdateAssignmentByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Assignment` being updated.
  """
  patch: AssignmentPatch!
  id: UUID!
}

"""The output of our update `Course` mutation."""
type UpdateCoursePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Course` that was updated by this mutation."""
  course: Course

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Course`. May be used by Relay 1."""
  courseEdge(
    """The method to use when ordering `Course`."""
    orderBy: [CoursesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CoursesEdge
}

"""All input for the `updateCourseByNodeId` mutation."""
input UpdateCourseByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Course` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Course` being updated.
  """
  patch: CoursePatch!
}

"""
Represents an update to a `Course`. Fields that are set will be updated.
"""
input CoursePatch {
  pk: Int
  id: UUID
  name: String
}

"""All input for the `updateCourse` mutation."""
input UpdateCourseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Course` being updated.
  """
  patch: CoursePatch!
  pk: Int!
}

"""All input for the `updateCourseById` mutation."""
input UpdateCourseByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Course` being updated.
  """
  patch: CoursePatch!
  id: UUID!
}

"""The output of our delete `Assignment` mutation."""
type DeleteAssignmentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Assignment` that was deleted by this mutation."""
  assignment: Assignment
  deletedAssignmentNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Course` that is related to this `Assignment`."""
  course: Course

  """An edge for our `Assignment`. May be used by Relay 1."""
  assignmentEdge(
    """The method to use when ordering `Assignment`."""
    orderBy: [AssignmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AssignmentsEdge
}

"""All input for the `deleteAssignmentByNodeId` mutation."""
input DeleteAssignmentByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Assignment` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteAssignment` mutation."""
input DeleteAssignmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  pk: Int!
}

"""All input for the `deleteAssignmentById` mutation."""
input DeleteAssignmentByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `Course` mutation."""
type DeleteCoursePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Course` that was deleted by this mutation."""
  course: Course
  deletedCourseNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Course`. May be used by Relay 1."""
  courseEdge(
    """The method to use when ordering `Course`."""
    orderBy: [CoursesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CoursesEdge
}

"""All input for the `deleteCourseByNodeId` mutation."""
input DeleteCourseByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Course` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCourse` mutation."""
input DeleteCourseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  pk: Int!
}

"""All input for the `deleteCourseById` mutation."""
input DeleteCourseByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}
